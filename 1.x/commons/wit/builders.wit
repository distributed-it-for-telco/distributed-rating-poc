
// Define the interface
// interface RatingResponseBuilder {
//     use crate::orange::rating::ratingagent::types.{}
//     // Constructor
//     new() -> RatingResponseBuilder

//     // Methods to set fields
//     unit(self: RatingResponseBuilder, unit: string) -> RatingResponseBuilder
//     price(self: RatingResponseBuilder, price: string) -> RatingResponseBuilder
//     message(self: RatingResponseBuilder, message: string) -> RatingResponseBuilder
//     authorized(self: RatingResponseBuilder) -> RatingResponseBuilder
//     not_authorized(self: RatingResponseBuilder) -> RatingResponseBuilder
//     next_agent(self: RatingResponseBuilder, next_agent: AgentIdentification) -> RatingResponseBuilder

//     // Method to build the response
//     build(self: RatingResponseBuilder) -> RatingResponse
// }

interface rating-response-builder {
    use types.{rating-response, agent-identification};

    type builder-handle = u32;

    create-builder: func() -> builder-handle;
    unit: func(handle: builder-handle, value: string) -> builder-handle;
    price: func(handle: builder-handle, value: string) -> builder-handle;
    message: func(handle: builder-handle, value: string) -> builder-handle;
    authorized: func(handle: builder-handle) -> builder-handle;
    not-authorized: func(handle: builder-handle) -> builder-handle;
    next-agent: func(handle: builder-handle, value: agent-identification) -> builder-handle;
    build: func(handle: builder-handle) -> rating-response;
}

interface some-builder{
    use types.{rating-response, agent-identification};

    resource builder {
       constructor(); 
       unit: func( value: string) -> builder;
       price: func( value: string) -> builder;
       message: func( value: string) -> builder;
       authorized: func() -> builder;
       not-authorized: func() -> builder;
       next-agent: func( value: agent-identification) -> builder;
       build: func() -> rating-response; 
      }
   }